// TODO task for updating dependent libs (jar+native) from kernel

ext.moduleName = 'aion.api.client'
apply plugin: 'java'
apply plugin: 'idea'

repositories {
    jcenter()
    flatDir { dirs './lib', './mod' }
}

dependencies { 
    /*compile project(":modAionBase");
    compile project(":modCrypto");
    compile project(":modLogger");
    compile project(":modRlp");*/

    compile files("mod/modAionBase.jar");
    compile files("mod/modCrypto.jar");
    compile files("mod/modLogger.jar");
    compile files("mod/modRlp.jar");
    compile files("${rootProject.projectDir}/lib/libnzmq.jar")
    compile files("${rootProject.projectDir}/lib/libnsc.jar")
    compile group: 'org.apache.commons', name: 'commons-collections4', version: '4.0'
    compile 'org.slf4j:slf4j-api:1.7.25'
    compile group: 'com.google.protobuf', name: 'protobuf-java', version: '3.5.0'
    compile group: 'com.google.code.gson', name: 'gson', version: '2.7'
    compile 'ch.qos.logback:logback-core:1.2.3'
    compile 'ch.qos.logback:logback-classic:1.2.3'
    
    testCompile 'junit:junit:4.12'
    testCompile 'com.google.truth:truth:0.42'
    testCompile 'org.hamcrest:hamcrest-all:1.3'
}

// TODO just implement the script as Groovy here instead of calling sh
task preBuild(type: Exec) { commandLine 'sh', 'script/prebuild.sh' }

task getVersion(type: JavaExec) { 
    description "Execute the apiDemo to get the version of release"
    classpath = sourceSets.main.runtimeClasspath
    main = 'org.aion.api.tools.ApiDemo'
    args '-v'
    standardOutput = new ByteArrayOutputStream()
    project.ext["compiled_version"] = "Unknown";
    doLast { 
       def date = new Date().format('YY-MM-dd')
       project.ext["compiled_version"] = standardOutput.toString().replace('\n', '') + '-' + date;
    }
}

task configFatJar {
    dependsOn getVersion
    doLast {
        fatJar.archiveName = "libAionApi-v${project.ext["compiled_version"]}.jar"
    }
}

task fatJar(type: Jar) { 
    dependsOn configFatJar

    description "Produce JAR containing all dependencies and runs demo as main class"
    dependsOn getVersion

    manifest {
        attributes 'Main-Class': 'org.aion.api.tools.ApiDemo',
                   'Implementation-Vendor': 'The Aion Foundation',
                   'Implementation-Vendor-Id': 'aion.network',
                   'Specification-Title': 'Aion Foundation Java API'
	
    }
    from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
    with jar
    destinationDir file('build')
}

task collectDependentJars(type: Copy) { 
    description = "Put all runtime jars (mod* and dependencies) into jars directory"
    into 'jars'
    from { project.configurations.runtime } 
    from { project.jar}
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}

javadoc { 
    include "org/aion/api/I*.java"
    include "org/aion/api/sol/I*.java"
    include "org/aion/api/type/AccountDetails.java"
    include "org/aion/api/type/ApiMsg.java"
    include "org/aion/api/type/Block.java"
    include "org/aion/api/type/BlockDetails.java"
    include "org/aion/api/type/BlockSql.java"
    include "org/aion/api/type/CompileResponse.java"
    include "org/aion/api/type/ContractAbiEntry.java"
    include "org/aion/api/type/ContractAbiIOParam.java"
    include "org/aion/api/type/ContractDeploy.java"
    include "org/aion/api/type/ContractEvent.java"
    include "org/aion/api/type/ContractEventFilter.java"
    include "org/aion/api/type/ContractResponse.java"
    include "org/aion/api/type/DeployResponse.java"
    include "org/aion/api/type/Event.java"
    include "org/aion/api/type/JsonFmt.java"
    include "org/aion/api/type/Key.java"
    include "org/aion/api/type/KeyExport.java"
    include "org/aion/api/type/MsgRsp.java"
    include "org/aion/api/type/Node.java"
    include "org/aion/api/type/Protocol.java"
    include "org/aion/api/type/SyncInfo.java"
    include "org/aion/api/type/Transaction.java"
    include "org/aion/api/type/TxArgs.java"
    include "org/aion/api/type/TxDetails.java"
    include "org/aion/api/type/TxLog.java"
    include "org/aion/api/type/TxReceipt.java"               
    options.bottom = '<i>Copyright (c) 2017-2018 Aion foundation</i>'
    title "Aion API"
}

task javadocZip(type: Zip) { 
    dependsOn javadoc
    dependsOn getVersion

    doFirst {
        archiveName = "Java-API-v${project.ext["compiled_version"]}-doc.zip"
    }
    destinationDir = file('build/')
    from javadoc.outputs 
}

task postBuildTar(type: Tar) { 
    description "Creates the full libAionApi-VERSION.tar.gz for distribution"
    dependsOn fatJar 
    dependsOn getVersion
    dependsOn javadocZip

    compression = Compression.GZIP

    doFirst {
        mkdir 'pack'
        archiveName = "libAionApi-v${project.ext["compiled_version"]}.tar.gz"
        destinationDir = file('pack')
        ant.echo("Aion Api build ver - ${version}")
    }
    into('/') { 
        from 'build'
        include "Java-API-v*-doc.zip"
        include "libAionApi-v*.jar"
    }
    into('/native') { 
        from 'native'
        include '**'
    }

    // also extract all the contents into pack, since
    // aion project expects stuff there for its own pack
}

task configExtractTarToPack { 
    dependsOn postBuildTar
    
    doFirst { 
        extractTarToPack.from tarTree("${postBuildTar.destinationDir}/${postBuildTar.archiveName}")
    }
}

task extractTarToPack(type: Copy) {
    dependsOn configExtractTarToPack
    destinationDir = file('pack')
}

task postBuildRevertVersion(type: Exec) { 
    description "Reverts the in-code version change applied by prebuild"
    commandLine 'git', 'checkout', './src/org/aion/api/IAionAPI.java'
}

build.dependsOn.remove("check") // these are integ tests
build.finalizedBy(extractTarToPack)

compileJava.dependsOn preBuild
compileJava.finalizedBy(postBuildRevertVersion)

clean.doFirst { 
    delete "pack"
}
