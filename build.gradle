ext.moduleName = 'aion.api.client'

apply plugin: 'java'
apply plugin: 'idea'

repositories {
    jcenter()

    flatDir {
        dirs './lib', './mod'
    }
}

dependencies { 
    /*compile project(":modAionBase");
    compile project(":modCrypto");
    compile project(":modLogger");
    compile project(":modRlp");*/
    compile files("mod/modAionBase.jar");
    compile files("mod/modCrypto.jar");
    compile files("mod/modLogger.jar");
    compile files("mod/modRlp.jar");
    compile files("${rootProject.projectDir}/lib/libnzmq.jar")
    compile files("${rootProject.projectDir}/lib/libnsc.jar")
    compile group: 'org.apache.commons', name: 'commons-collections4', version: '4.0'
    compile 'org.slf4j:slf4j-api:1.7.25'
    compile group: 'com.google.protobuf', name: 'protobuf-java', version: '3.5.0'
    compile group: 'com.google.code.gson', name: 'gson', version: '2.7'
    compile 'ch.qos.logback:logback-core:1.2.3'
    compile 'ch.qos.logback:logback-classic:1.2.3'
    
    testCompile 'junit:junit:4.12'
    testCompile 'com.google.truth:truth:0.42'
    testCompile 'org.hamcrest:hamcrest-all:1.3'
}

task preBuild(type: Exec) { commandLine 'sh', 'script/prebuild.sh' }
task getVersion(type: JavaExec) { 
    classpath = sourceSets.main.runtimeClasspath
    main = 'org.aion.api.tools.ApiDemo'
    args '-v'
    standardOutput = new ByteArrayOutputStream()
}
task fatJar(type: Jar) {
    manifest {
        attributes 'Main-Class': 'org.aion.api.tools.ApiDemo',
                   'Implementation-Vendor': 'The Aion Foundation',
                   'Implementation-Vendor-Id': 'aion.network',
                   'Specification-Title': 'Aion Foundation Java API'
	
    }
    baseName = 'libAionApi'
    version = ''
    from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
    with jar
    destinationDir file('build')
}
task postBuildTar(type: Tar) { 
    mustRunAfter getVersion
    doFirst {
        def version = getVersion.standardOutput.toString().replace('\n', '');
        archiveName = "libAionApi-v${version}.tar.gz"
    }
    into('/jars') {  // was lib in ant world
        from 'jars'
        include '*.jar'
    }
    into('/') { 
        from 'build'
        include "Java-API-v*-doc.zip"
        include fatJar.archiveName
    }
    destinationDir = file('pack')


/*
    into('/aion/') { 
        from dirWorkspace
        include 'aion.sh', 'aion_gui.sh'
    }
    into('/aion/native') {
        from dirNative
        include '**'
    }
    into('/aion/config') {
        from "${dirPack}/config"
        include '**'
    }
    into('/aion/rt') {
        from "${dirPack}/rt"
        include '**'
    }
    into('/aion/web3') {
        from "${dirPack}/web3"
        include '**'
    }
    into('/aion/docs') {
        from "${dirPack}/docs"
        include '**'
    }
    into('/aion/clientAPI') {
        from "${dirPack}/clientAPI"
        include '**'
    }
    into('/aion/script') {
        from "${dirPack}/script"
        include 'generateSslCert.sh', 'nohup_wrapper.sh'
    }*/
}
task postBuildRevertVersion(type: Exec) { 
    commandLine 'git', 'checkout', './src/org/aion/api/IAionAPI.java'
}
task copyJarToPack(type: Copy) { from "${buildDir}/libs" into file('pack') }
task collectDependentJars(type: Copy) { 
    into 'jars'
    from { project.configurations.runtime } 
    from { project.jar}
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}
javadoc { 
    include "org/aion/api/I*.java"
    include "org/aion/api/sol/I*.java"
    include "org/aion/api/type/AccountDetails.java"
    include "org/aion/api/type/ApiMsg.java"
    include "org/aion/api/type/Block.java"
    include "org/aion/api/type/BlockDetails.java"
    include "org/aion/api/type/BlockSql.java"
    include "org/aion/api/type/CompileResponse.java"
    include "org/aion/api/type/ContractAbiEntry.java"
    include "org/aion/api/type/ContractAbiIOParam.java"
    include "org/aion/api/type/ContractDeploy.java"
    include "org/aion/api/type/ContractEvent.java"
    include "org/aion/api/type/ContractEventFilter.java"
    include "org/aion/api/type/ContractResponse.java"
    include "org/aion/api/type/DeployResponse.java"
    include "org/aion/api/type/Event.java"
    include "org/aion/api/type/JsonFmt.java"
    include "org/aion/api/type/Key.java"
    include "org/aion/api/type/KeyExport.java"
    include "org/aion/api/type/MsgRsp.java"
    include "org/aion/api/type/Node.java"
    include "org/aion/api/type/Protocol.java"
    include "org/aion/api/type/SyncInfo.java"
    include "org/aion/api/type/Transaction.java"
    include "org/aion/api/type/TxArgs.java"
    include "org/aion/api/type/TxDetails.java"
    include "org/aion/api/type/TxLog.java"
    include "org/aion/api/type/TxReceipt.java"               
    options.bottom = '<i>Copyright (c) 2017-2018 Aion foundation</i>'
    title "Aion API"
}
task javadocZip(type: Zip) { 
    doFirst {
        def version = getVersion.standardOutput.toString().replace('\n', '');
        archiveName = "Java-API-v${version}-doc.zip"
    }
    from 'build'//javadoc.destinationDir
    destinationDir = file('build/')
}

compileJava.dependsOn preBuild
build.dependsOn.remove("check") // these are integ tests
build.finalizedBy(postBuildTar)
build.finalizedBy(postBuildRevertVersion)
build.finalizedBy(javadocZip)
postBuildTar.dependsOn copyJarToPack
postBuildTar.dependsOn fatJar 
postBuildTar.dependsOn collectDependentJars
postBuildTar.dependsOn getVersion
javadocZip.dependsOn getVersion
javadocZip.dependsOn javadoc 

